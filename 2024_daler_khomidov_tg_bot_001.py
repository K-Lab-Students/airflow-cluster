from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import Variable
from datetime import datetime, timedelta
import requests

default_args = {
    'owner': '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞',
    'start_date': datetime(2024, 7, 19, 22, 40), 
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
}

def send_airflow_alive_message():
    bot_token = "8128045612:AAENaeVPYa9YHCzJfk07aYCSmOLMEplaqAM" #Variable.get('telegram_bot_token')
    chat_id = "-1002095886585" #Variable.get('telegram_chat_id')
    utc_now = datetime.now()
    utc_plus_3 = utc_now + timedelta(hours=3)
    formatted_time = utc_plus_3.strftime("%Y-%m-%d %H:%M:%S")
    message = f"üê± *Airflow –∂–∏–≤!* üê±\n–û—Ç—á–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è (UTC+3): {formatted_time}"
    return message
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    message_thread_id = 15206 #Variable.get('telegram_message_thread_id', default_var=None)
    if message_thread_id:
        payload["message_thread_id"] = message_thread_id

    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()  
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
    except requests.exceptions.HTTPError as errh:
        print(f"HTTP –æ—à–∏–±–∫–∞: {errh} - –û—Ç–≤–µ—Ç: {response.text}")
        raise
    except requests.exceptions.ConnectionError as errc:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {errc}")
        raise
    except requests.exceptions.Timeout as errt:
        print(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {errt}")
        raise
    except requests.exceptions.RequestException as err:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {err}")
        raise

with DAG(
    dag_id='simple_airflow_alive_report',
    default_args=default_args,
    description='–ü—Ä–æ—Å—Ç–æ–π DAG –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "Airflow –∂–∏–≤" –≤ Telegram',
    schedule_interval=timedelta(hours=1),  
    catchup=False,
    tags=['simple', 'telegram', 'health-check'],
) as dag:

    send_alive_message = PythonOperator(
        task_id='send_airflow_alive_message',
        python_callable=send_airflow_alive_message,
    )

    send_alive_message
