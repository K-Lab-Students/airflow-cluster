from airflow import DAG
from airflow.operators.python import PythonOperator
from airflow.models import Variable
from datetime import datetime, timedelta
import requests

# Default arguments for the DAG
default_args = {
    'owner': '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞',
    'start_date': datetime(2024, 10, 19, 22, 40),  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    'retries': 0,
    'retry_delay': timedelta(minutes=5),
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_airflow_alive_message():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Airflow
    bot_token = Variable.get('telegram_bot_token')
    chat_id = Variable.get('telegram_chat_id')

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = "üê± *Airflow –∂–∏–≤!* üê±"

    # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
       # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    message_thread_id = Variable.get('telegram_message_thread_id', default_var=None)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ message_thread_id, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
    if message_thread_id:
        payload["message_thread_id"] = message_thread_id

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞
        response = requests.post(url, data=payload)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {response.json()}")
    except requests.exceptions.HTTPError as errh:
        print(f"HTTP –æ—à–∏–±–∫–∞: {errh} - –û—Ç–≤–µ—Ç: {response.text}")
        raise
    except requests.exceptions.ConnectionError as errc:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {errc}")
        raise
    except requests.exceptions.Timeout as errt:
        print(f"–û—à–∏–±–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞: {errt}")
        raise
    except requests.exceptions.RequestException as err:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {err}")
        raise

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ DAG
with DAG(
    dag_id='simple_airflow_alive_report',
    default_args=default_args,
    description='–ü—Ä–æ—Å—Ç–æ–π DAG –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "Airflow –∂–∏–≤" –≤ Telegram',
    schedule_interval=timedelta(minutes=1),  # –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —á–∞—Å
    catchup=False,
    tags=['simple', 'telegram', 'health-check'],
) as dag:

    send_alive_message = PythonOperator(
        task_id='send_airflow_alive_message',
        python_callable=send_airflow_alive_message,
    )

    send_alive_message
