from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
from kubernetes import client, config
from telegram import Bot
from telegram.error import TelegramError

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–æ–¥–∞—Ö
def get_available_nodes():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Kubernetes (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ kubeconfig –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞)
        config.load_incluster_config()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ DAG —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Ç–µ—Ä–∞
        # config.load_kube_config()  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –µ—Å–ª–∏ DAG —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ kubeconfig

        v1 = client.CoreV1Api()
        nodes = v1.list_node()

        available_cpus = 0
        available_gpus = 0
        available_nodes = []

        for node in nodes.items:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–æ–¥—ã
            allocatable = node.status.allocatable
            cpu = allocatable.get('cpu')
            memory = allocatable.get('memory')
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ GPU —Ä–µ—Å—É—Ä—Å—ã –∏–º–µ—é—Ç –∫–ª—é—á 'nvidia.com/gpu'
            gpu = allocatable.get('nvidia.com/gpu', '0')

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ —á–∏—Å–ª–∞
            cpu_count = float(cpu.replace('m', '')) / 1000  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑ –º–∏–ª—å—è–¥–Ω—ã—Ö
            gpu_count = int(gpu)

            # –°—É–º–º–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
            available_cpus += cpu_count
            available_gpus += gpu_count

            available_nodes.append({
                'name': node.metadata.name,
                'cpu': cpu_count,
                'gpu': gpu_count,
                'memory': memory
            })

        return {
            'total_available_cpus': available_cpus,
            'total_available_gpus': available_gpus,
            'nodes': available_nodes
        }

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–∞—Ö: {e}")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
def send_hourly_report():
    # –¢–æ–∫–µ–Ω –∏ chat_id –≤—Ç–æ—Ä–æ–≥–æ –±–æ—Ç–∞ ("–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞")
    bot_token = '8128045612:AAFo8RrpRlKO6KH82w9-_m9pFwE1lENZQak'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ "–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞"
    chat_id = '-1002095886585'          # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ chat_id –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –∏–ª–∏ —á–∞—Ç–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–æ–¥–∞—Ö
    node_info = get_available_nodes()
    total_cpus = node_info['total_available_cpus']
    total_gpus = node_info['total_available_gpus']
    nodes = node_info['nodes']

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = f"""
üê± *–ï–∂–µ—á–∞—Å–Ω—ã–π –û—Ç—á—ë—Ç –ö–ª–∞—Å—Ç–µ—Ä–∞* üê±

üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:*
- **CPU:** {total_cpus} —è–¥—Ä–∞
- **GPU:** {total_gpus} GPU

üñ•Ô∏è *–î–µ—Ç–∞–ª–∏ –ø–æ –Ω–æ–¥–∞–º:*
"""
    for node in nodes:
        message += f"""
- *–ù–æ–¥–∞:* {node['name']}
  - CPU: {node['cpu']} —è–¥—Ä–∞
  - GPU: {node['gpu']} GPU
  - –ü–∞–º—è—Ç—å: {node['memory']}
"""

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=bot_token)

    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode='Markdown',
            message_thread_id=15206  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à message_thread_id (topic ID)
        )
        print("–ï–∂–µ—á–∞—Å–Ω—ã–π –æ—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except TelegramError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise

# Default arguments –¥–ª—è DAG
default_args = {
    'owner': '–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞',            # –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ DAG
    'depends_on_past': False,
    'retries': 2,
    'retry_delay': timedelta(minutes=5),
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ DAG
with DAG(
    dag_id='telegram_hourly_report',
    default_args=default_args,
    description='DAG –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ—á–∞—Å–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–Ω—ã—Ö –Ω–æ–¥–∞—Ö —á–µ—Ä–µ–∑ Telegram –±–æ—Ç "–∫–æ—à–∫–æ–¥–µ–≤–æ—á–∫–∞"',
    schedule_interval=timedelta(hours=1),  # –ó–∞–ø—É—Å–∫ —Ä–∞–∑ –≤ —á–∞—Å
    start_date=datetime(2024, 10, 19, 22, 40),  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
    catchup=False,
    tags=['telegram', 'report', 'hourly', 'cluster'],
) as dag:

    send_report = PythonOperator(
        task_id='send_hourly_telegram_report',
        python_callable=send_hourly_report,
    )

    send_report
